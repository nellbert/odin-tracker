# Generated by Django 5.2 on 2025-05-06 06:07

from django.db import migrations

# Data for Achievements (must align with ACHIEVEMENT_SLUGS in achievements.py)
INITIAL_ACHIEVEMENTS = [
    {
        "title": "First Step Taken",
        "description": "You've completed your very first lesson! The journey of a thousand miles begins with a single step.",
        "icon_class": "fas fa-shoe-prints",
        "points_reward": 10,
        "achievement_slug": "first-lesson-completed"
    },
    {
        "title": "HTML Padawan",
        "description": "You've mastered the foundational concepts of HTML. The web is your canvas!",
        "icon_class": "fab fa-html5",
        "points_reward": 50,
        "achievement_slug": "html-foundation-complete"
    },
    {
        "title": "CSS Stylist",
        "description": "You've conquered the basics of CSS. Time to make the web beautiful!",
        "icon_class": "fab fa-css3-alt",
        "points_reward": 50,
        "achievement_slug": "css-foundation-complete"
    },
    {
        "title": "JavaScript Novice",
        "description": "The fundamentals of JavaScript are yours! Let the coding adventures begin.",
        "icon_class": "fab fa-js-square",
        "points_reward": 75,
        "achievement_slug": "javascript-basics-complete"
    },
    {
        "title": "Project Pioneer",
        "description": "Your first project is complete! Building real things is the best way to learn.",
        "icon_class": "fas fa-project-diagram",
        "points_reward": 100,
        "achievement_slug": "first-project-completed"
    },
    {
        "title": "Section Sweeper",
        "description": "You've completed all lessons in a section! Thorough and dedicated.",
        "icon_class": "fas fa-check-double",
        "points_reward": 30,
        "achievement_slug": "perfect-section"
    },
    {
        "title": "Committed Learner",
        "description": "A 10-day streak! Your consistency is admirable.",
        "icon_class": "fas fa-calendar-check",
        "points_reward": 50,
        "achievement_slug": "ten-day-streak"
    },
    {
        "title": "Dedicated Scholar",
        "description": "A 30-day streak! You're building an incredible learning habit.",
        "icon_class": "fas fa-award",
        "points_reward": 150,
        "achievement_slug": "thirty-day-streak"
    },
    {
        "title": "Centurion Club",
        "description": "You've earned 100 points! Keep up the great work.",
        "icon_class": "fas fa-star",
        "points_reward": 20,
        "achievement_slug": "100-points-milestone"
    },
    {
        "title": "Grand Master (500)",
        "description": "Wow, 500 points! You're becoming a true OdinTrack champion.",
        "icon_class": "fas fa-crown",
        "points_reward": 100,
        "achievement_slug": "500-points-milestone"
    },
    {
        "title": "Foundations Graduate",
        "description": "You've completed the entire Foundations course! An amazing accomplishment. What's next?",
        "icon_class": "fas fa-graduation-cap",
        "points_reward": 250,
        "achievement_slug": "foundations-course-completed"
    },
]

def populate_achievements_data(apps, schema_editor):
    Achievement = apps.get_model('tracker', 'Achievement')
    
    existing_slugs = Achievement.objects.values_list('achievement_slug', flat=True)
    created_count = 0

    print("\nPopulating initial Achievements...")
    for ach_data in INITIAL_ACHIEVEMENTS:
        if ach_data['achievement_slug'] not in existing_slugs:
            Achievement.objects.create(**ach_data)
            print(f"  Created Achievement: {ach_data['title']}")
            created_count += 1
        else:
            print(f"  Skipped (already exists): {ach_data['title']} (slug: {ach_data['achievement_slug']})")
    
    if created_count == 0 and len(INITIAL_ACHIEVEMENTS) > 0:
        print("No new achievements were added. All might exist already.")
    elif created_count > 0:
        print(f"{created_count} new achievements populated.")
    else:
        print("No achievements defined in migration to populate.")

def reverse_populate_achievements_data(apps, schema_editor):
    Achievement = apps.get_model('tracker', 'Achievement')
    slugs_to_delete = [ach_data['achievement_slug'] for ach_data in INITIAL_ACHIEVEMENTS]
    
    print(f"\nAttempting to delete achievements with slugs: {slugs_to_delete}")
    deleted_count, _ = Achievement.objects.filter(achievement_slug__in=slugs_to_delete).delete()
    if deleted_count > 0:
        print(f"Deleted {deleted_count} achievements defined in this migration.")
    else:
        print("No achievements (matching these slugs) found to delete.")

class Migration(migrations.Migration):

    dependencies = [
        ('tracker', '0004_achievement_userachievement'), # Corrected dependency name
    ]

    operations = [
        migrations.RunPython(populate_achievements_data, reverse_code=reverse_populate_achievements_data),
    ]
