# Generated by Django 5.2 on 2025-05-06 07:10

from django.db import migrations

INITIAL_DAILY_CHALLENGE_TYPES = [
    {
        "title": "Quick Learner",
        "description_template": "Complete {target_value} lesson today to prove your speed!",
        "challenge_type": "COMPLETE_N_LESSONS",
        "target_value": 1,
        "points_reward": 15,
        "is_active": True
    },
    {
        "title": "Diligent Student",
        "description_template": "Complete {target_value} lessons today. Consistency is key!",
        "challenge_type": "COMPLETE_N_LESSONS",
        "target_value": 3,
        "points_reward": 40,
        "is_active": True
    },
    {
        "title": "Point Scorer",
        "description_template": "Earn at least {target_value} points today from your learning.",
        "challenge_type": "EARN_N_POINTS",
        "target_value": 30, 
        "points_reward": 20,
        "is_active": True
    },
    {
        "title": "Point Collector",
        "description_template": "Amass {target_value} points today. Show your dedication!",
        "challenge_type": "EARN_N_POINTS",
        "target_value": 75,
        "points_reward": 50,
        "is_active": True
    },
    {
        "title": "Project Powerhouse",
        "description_template": "Tackle and complete {target_value} project today!",
        "challenge_type": "COMPLETE_PROJECT",
        "target_value": 1,
        "points_reward": 60,
        "is_active": True
    }
]

def populate_daily_challenge_data(apps, schema_editor):
    DailyChallenge = apps.get_model('tracker', 'DailyChallenge')
    
    created_count = 0
    print("\nPopulating initial DailyChallenge types...")
    for challenge_data in INITIAL_DAILY_CHALLENGE_TYPES:
        obj, created = DailyChallenge.objects.get_or_create(
            title=challenge_data["title"],
            defaults=challenge_data
        )
        if created:
            print(f"  Created DailyChallenge: {obj.title}")
            created_count += 1
        else:
            print(f"  Skipped (already exists by title): {obj.title}")

    if created_count == 0 and len(INITIAL_DAILY_CHALLENGE_TYPES) > 0:
        print("No new DailyChallenge types were added. All might exist already by title.")
    elif created_count > 0:
        print(f"{created_count} new DailyChallenge types populated.")
    else:
        print("No DailyChallenge types defined in migration to populate.")

def reverse_populate_daily_challenge_data(apps, schema_editor):
    DailyChallenge = apps.get_model('tracker', 'DailyChallenge')
    titles_to_delete = [data['title'] for data in INITIAL_DAILY_CHALLENGE_TYPES]
    
    print(f"\nAttempting to delete DailyChallenge types with titles: {titles_to_delete}")
    deleted_count, _ = DailyChallenge.objects.filter(title__in=titles_to_delete).delete()
    if deleted_count > 0:
        print(f"Deleted {deleted_count} DailyChallenge types defined in this migration.")
    else:
        print("No DailyChallenge types (matching these titles) found to delete.")


class Migration(migrations.Migration):

    dependencies = [
        ('tracker', '0006_dailychallenge_userdailychallenge'),
    ]

    operations = [
        migrations.RunPython(populate_daily_challenge_data, reverse_code=reverse_populate_daily_challenge_data),
    ]
