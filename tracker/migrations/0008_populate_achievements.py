# Generated by Django 5.2 on 2025-05-06 14:05

from django.db import migrations

# List of achievements to add/update
ACHIEVEMENTS_LIST = [
    # Core Progression
    {'slug': 'first_completion', 'title': 'Trailblazer', 'description': 'Completed your very first lesson or project.', 'icon': 'fas fa-shoe-prints', 'points': 10},
    {'slug': 'first_project', 'title': 'Builder', 'description': 'Completed your first Project.', 'icon': 'fas fa-drafting-compass', 'points': 25},
    {'slug': 'completed_html_section', 'title': 'HTML Hero', 'description': 'Completed all lessons and projects in the HTML section.', 'icon': 'fab fa-html5', 'points': 50},
    {'slug': 'completed_css_section', 'title': 'CSS Champion', 'description': 'Completed all lessons and projects in the CSS section.', 'icon': 'fab fa-css3-alt', 'points': 50},
    # Add more section completions here (e.g., completed_js_section)
    {'slug': 'completed_all', 'title': 'Odin Graduate', 'description': 'Completed all lessons and projects in the course.', 'icon': 'fas fa-user-graduate', 'points': 200},
    {'slug': 'points_100', 'title': 'Point Collector', 'description': 'Reached 100 total points.', 'icon': 'fas fa-coins', 'points': 10},
    {'slug': 'points_500', 'title': 'Point Hoarder', 'description': 'Reached 500 total points.', 'icon': 'fas fa-gem', 'points': 25},
    {'slug': 'points_1000', 'title': 'Point Tycoon', 'description': 'Reached 1000 total points.', 'icon': 'fas fa-crown', 'points': 50},
    {'slug': 'streak_3_day', 'title': 'Streak Starter', 'description': 'Achieved a 3-day learning streak.', 'icon': 'fas fa-fire', 'points': 15},
    {'slug': 'streak_7_day', 'title': 'Weekly Warrior', 'description': 'Achieved a 7-day learning streak.', 'icon': 'fas fa-calendar-week', 'points': 30},
    {'slug': 'streak_30_day', 'title': 'Monthly Master', 'description': 'Achieved a 30-day learning streak.', 'icon': 'fas fa-calendar-alt', 'points': 100},

    # Fun / Engagement / Exploration
    {'slug': 'first_daily_challenge', 'title': 'Challenger Accepted', 'description': 'Completed your first Daily Challenge.', 'icon': 'fas fa-bullseye-pointer', 'points': 20},
    {'slug': 'daily_challenge_5', 'title': 'Consistent Challenger', 'description': 'Completed 5 Daily Challenges.', 'icon': 'fas fa-calendar-check', 'points': 50},
    {'slug': 'viewed_leaderboard', 'title': 'Checking the Competition', 'description': 'Viewed the Leaderboard page.', 'icon': 'fas fa-binoculars', 'points': 5},
    {'slug': 'viewed_achievements', 'title': 'Trophy Hunter', 'description': 'Viewed the Achievements page.', 'icon': 'fas fa-trophy', 'points': 5},
    {'slug': 'weekend_completion', 'title': 'Weekend Warrior', 'description': 'Completed a lesson or project on a Saturday or Sunday.', 'icon': 'fas fa-umbrella-beach', 'points': 10},
    {'slug': 'learning_spree_3', 'title': 'Learning Spree', 'description': 'Completed 3 or more lessons/projects in a single day.', 'icon': 'fas fa-running', 'points': 25},
    {'slug': 'reset_progress', 'title': 'Fresh Start', 'description': 'Reset your progress using the settings page. (Brave!)', 'icon': 'fas fa-recycle', 'points': 0},
]

def populate_achievements(apps, schema_editor):
    Achievement = apps.get_model('tracker', 'Achievement')
    print("\nPopulating/updating achievements...") # Add print statement
    for ach_data in ACHIEVEMENTS_LIST:
        slug = ach_data['slug']
        defaults = {
            'title': ach_data['title'],
            'description': ach_data['description'],
            'icon_class': ach_data['icon'],
            'points_reward': ach_data['points'],
        }
        # Use update_or_create to avoid duplicates and allow updates
        obj, created = Achievement.objects.update_or_create(
            achievement_slug=slug,
            defaults=defaults
        )
        if created:
            print(f"  Created achievement: {slug}")
        else:
            print(f"  Updated achievement: {slug}")
    print("Finished populating/updating achievements.")

def remove_achievements(apps, schema_editor):
    Achievement = apps.get_model('tracker', 'Achievement')
    slugs_to_remove = [ach['slug'] for ach in ACHIEVEMENTS_LIST]
    print(f"\nAttempting to delete achievements with slugs: {slugs_to_remove}")
    deleted_count, _ = Achievement.objects.filter(achievement_slug__in=slugs_to_remove).delete()
    print(f"Deleted {deleted_count} achievements specified in ACHIEVEMENTS_LIST.")


class Migration(migrations.Migration):

    dependencies = [
        ('tracker', '0007_populate_daily_challenge_data'), # Set correct dependency
    ]

    operations = [
        migrations.RunPython(populate_achievements, remove_achievements),
    ]
